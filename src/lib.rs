//! # Google Sign-In
//!
//! This crate provides an API to verify Google's OAuth client id tokens
//! for use with Google is an authentication provider.
//!
//! Typically these tokens are generated by a web application using the
//! [Google Platform Library](https://developers.google.com/identity/sign-in/web/sign-in).
//!
//! ## Getting Started
//! Create a new client and configure it with your client id(s).
//!
//! ```
//! # fn main() {
//! let mut client = google_signin::Client::default();
//! client.audiences.push("YOUR_CLIENT_ID.apps.googleusercontent.com".to_string()); // required
//! client.hosted_domains.push("YOUR_HOSTED_DOMAIN.tld".to_string()); // optional
//! # }
//! ```
//!
//! When you get an id token (typically in an HTTP request handler), you should verify
//! it using the client's `verify` method:
//!
//! ```
//! struct GoogleLogin {
//!     token: String,
//! }
//!
//! # async fn handler(client: &google_signin::Client, request: GoogleLogin) {
//! let id_info = client.verify(&request.token).await.expect("Expected token to be valid");
//! println!("Success! Signed-in as {}", id_info.sub);
//! # }
//! ```

mod cache_control;
mod client;
mod token;

pub use client::Client;
pub use token::IdInfo;

/// A network or validation error
#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error("JSON error: {0}")]
    DecodeJson(#[from] serde_json::Error),
    #[error("JWT error: {0}")]
    JSONWebToken(#[from] jsonwebtoken::errors::Error),
    #[error("IO error: {0}")]
    IoError(#[from] std::io::Error),
    #[error("Hyper error: {0}")]
    HyperError(#[from] hyper::Error),
    #[error("Token does not match any known key")]
    InvalidKey,
    #[error("Token was not recognized by google")]
    InvalidToken,
    #[error("Token was not issued by google")]
    InvalidIssuer,
    #[error("Token is for a different google application")]
    InvalidAudience,
    #[error("User is not a member of the hosted domain(s)")]
    InvalidHostedDomain,
}
